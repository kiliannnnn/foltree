import os
import tkinter as tk
from tkinter import filedialog, ttk
import time
import random

class ToolTip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        widget.bind("<Enter>", self.show_tooltip)
        widget.bind("<Leave>", self.hide_tooltip)

    def show_tooltip(self, event):
        if self.tooltip_window or not self.text:
            return
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 25
        self.tooltip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        label = tk.Label(tw, text=self.text, justify=tk.LEFT,
                         background="#ffffe0", relief=tk.SOLID, borderwidth=1,
                         font=("tahoma", "8", "normal"))
        label.pack(ipadx=1)

    def hide_tooltip(self, event):
        tw = self.tooltip_window
        self.tooltip_window = None
        if tw:
            tw.destroy()

def folder_to_text(folder_path, format_type):
    folder_structure = []
    for root, dirs, files in os.walk(folder_path):
        level = root.replace(folder_path, '').count(os.sep)
        if format_type == "Indented":
            indent = ' ' * 4 * level
            folder_structure.append(f'{indent}{os.path.basename(root)}/')
            sub_indent = ' ' * 4 * (level + 1)
            for f in files:
                folder_structure.append(f'{sub_indent}{f}')
        elif format_type == "Tree":
            indent = '│   ' * level
            folder_structure.append(f'{indent}├── {os.path.basename(root)}')
            sub_indent = '│   ' * (level + 1)
            for f in files:
                folder_structure.append(f'{sub_indent}├── {f}')
    return '\n'.join(folder_structure)

def text_to_folder(text, output_path, format_type):
    lines = text.split('\n')
    current_path = [output_path]
    for line in lines:
        if format_type == "Indented":
            indent_level = len(line) - len(line.lstrip(' '))
            level = indent_level // 4
        elif format_type == "Tree":
            indent_level = line.count('│   ')
            level = indent_level
        while len(current_path) > level + 1:
            current_path.pop()
        if format_type == "Indented":
            path = os.path.join(*current_path, line.strip())
        elif format_type == "Tree":
            item_name = line.strip().replace('├── ', '').replace('└── ', '').replace('│   ', '')
            path = os.path.join(*current_path, item_name)
        if format_type == "Tree" and '.' not in item_name:
            os.makedirs(path, exist_ok=True)
            current_path.append(path)
        elif format_type == "Indented" and line.strip().endswith('/'):
            os.makedirs(path, exist_ok=True)
            current_path.append(path)
        else:
            # Ensure the directory exists before creating the file
            dir_path = os.path.dirname(path)
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)
            open(path, 'w').close()

def select_folder():
    folder_path = filedialog.askdirectory()
    if folder_path:
        global folder_structures
        folder_structures = {
            "Indented": folder_to_text(folder_path, "Indented"),
            "Tree": folder_to_text(folder_path, "Tree")
        }
        display_selected_format()

def display_selected_format():
    format_type = format_var.get()
    text_box.delete(1.0, tk.END)
    text_box.insert(tk.END, folder_structures[format_type])

def generate_folder():
    global folder_structures
    text = text_box.get(1.0, tk.END).strip()
    format_type = format_var.get()
    if use_output_folder.get():
        output_path = os.path.join(os.path.dirname(__file__), 'output')
        if not os.path.exists(output_path):
            os.makedirs(output_path)
        unique_folder_name = f"{time.strftime('%Y%m%d%H%M%S')}_{random.randint(1000, 9999)}"
        output_path = os.path.join(output_path, unique_folder_name)
        os.makedirs(output_path)
    else:
        output_path = filedialog.askdirectory()
        if not output_path:
            return
    text_to_folder(text, output_path, format_type)
    
    # Create README.md file with UTF-8 encoding
    readme_path = os.path.join(output_path, "README.md")
    with open(readme_path, 'w', encoding='utf-8') as readme_file:
        readme_file.write("# Foltree\n\n")
        readme_file.write("This folder structure was generated by Foltree.\n")
        readme_file.write("Foltree is a bidirectional converter for folder to text and text to folder.\n")
        readme_file.write("Foltree by [kiliannnnn](https://github.com/kiliannnnn)\n\n")
        readme_file.write("## Structure\n\n")
        readme_file.write("```\n")
        readme_file.write(folder_structures[format_type])
        readme_file.write("\n```\n")
    
    # Update the status message
    status_var.set("Folder structure generated successfully.")

def on_format_change(*args):
    display_selected_format()

# Create the main window
root = tk.Tk()
root.title("Folder Structure Generator")
root.geometry("600x500")

# Define the status variable
status_var = tk.StringVar(value="Status: Ready")

# Create a label to display the status
status_label = ttk.Label(root, textvariable=status_var, foreground="green", font=("Arial", 10))
status_label.pack(pady=10)

# Create a frame for the text box and scrollbar
text_frame = ttk.Frame(root, padding="10")
text_frame.pack(fill=tk.BOTH, expand=True)

# Create a Text widget with a scrollbar
text_box = tk.Text(text_frame, wrap='word', width=50, height=15)
text_box.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

scrollbar = ttk.Scrollbar(text_frame, command=text_box.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
text_box.config(yscrollcommand=scrollbar.set)

# Create a frame for the options
options_frame = ttk.Frame(root, padding="10")
options_frame.pack(fill=tk.X)

# Create a Checkbutton widget
use_output_folder = tk.BooleanVar()
output_folder_checkbox = ttk.Checkbutton(options_frame, text="Use 'output' folder", variable=use_output_folder)
output_folder_checkbox.pack(side=tk.LEFT, padx=5, pady=5)

# Add a tooltip to the Checkbutton
ToolTip(output_folder_checkbox, "If checked, the result will be saved in an 'output' folder with a unique name. If unchecked, you will be prompted to select a folder.")

# Create a dropdown menu to select format
format_var = tk.StringVar(value="Indented")
format_var.trace('w', on_format_change)
format_label = ttk.Label(options_frame, text="Select Format:")
format_label.pack(side=tk.LEFT, padx=5, pady=5)
format_dropdown = tk.OptionMenu(options_frame, format_var, "Indented", "Tree")
format_dropdown.pack(side=tk.LEFT, padx=5, pady=5)

# Create a frame for the buttons
button_frame = ttk.Frame(root, padding="10")
button_frame.pack(fill=tk.X)

# Create a Button widget to generate folder structure
generate_button = ttk.Button(button_frame, text="Generate Folder Structure", command=generate_folder)
generate_button.pack(side=tk.LEFT, padx=10, pady=10, fill=tk.X)

# Create a Button widget to select folder and translate to text
select_folder_button = ttk.Button(button_frame, text="Load Folder Structure", command=select_folder)
select_folder_button.pack(side=tk.LEFT, padx=10, pady=10, fill=tk.X)

# Initialize the folder_structures variable
folder_structures = {
    "Indented": "",
    "Tree": ""
}

# Start the main event loop
root.mainloop()
